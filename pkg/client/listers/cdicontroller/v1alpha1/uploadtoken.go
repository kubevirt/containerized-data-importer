/*
Copyright 2018 The CDI Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubevirt.io/containerized-data-importer/pkg/apis/cdicontroller/v1alpha1"
)

// UploadTokenLister helps list UploadTokens.
type UploadTokenLister interface {
	// List lists all UploadTokens in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.UploadToken, err error)
	// UploadTokens returns an object that can list and get UploadTokens.
	UploadTokens(namespace string) UploadTokenNamespaceLister
	UploadTokenListerExpansion
}

// uploadTokenLister implements the UploadTokenLister interface.
type uploadTokenLister struct {
	indexer cache.Indexer
}

// NewUploadTokenLister returns a new UploadTokenLister.
func NewUploadTokenLister(indexer cache.Indexer) UploadTokenLister {
	return &uploadTokenLister{indexer: indexer}
}

// List lists all UploadTokens in the indexer.
func (s *uploadTokenLister) List(selector labels.Selector) (ret []*v1alpha1.UploadToken, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UploadToken))
	})
	return ret, err
}

// UploadTokens returns an object that can list and get UploadTokens.
func (s *uploadTokenLister) UploadTokens(namespace string) UploadTokenNamespaceLister {
	return uploadTokenNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UploadTokenNamespaceLister helps list and get UploadTokens.
type UploadTokenNamespaceLister interface {
	// List lists all UploadTokens in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.UploadToken, err error)
	// Get retrieves the UploadToken from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.UploadToken, error)
	UploadTokenNamespaceListerExpansion
}

// uploadTokenNamespaceLister implements the UploadTokenNamespaceLister
// interface.
type uploadTokenNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UploadTokens in the indexer for a given namespace.
func (s uploadTokenNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UploadToken, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UploadToken))
	})
	return ret, err
}

// Get retrieves the UploadToken from the indexer for a given namespace and name.
func (s uploadTokenNamespaceLister) Get(name string) (*v1alpha1.UploadToken, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("uploadtoken"), name)
	}
	return obj.(*v1alpha1.UploadToken), nil
}
