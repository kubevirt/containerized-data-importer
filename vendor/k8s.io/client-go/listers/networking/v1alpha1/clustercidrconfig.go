/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api/networking/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterCIDRConfigLister helps list ClusterCIDRConfigs.
// All objects returned here must be treated as read-only.
type ClusterCIDRConfigLister interface {
	// List lists all ClusterCIDRConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterCIDRConfig, err error)
	// Get retrieves the ClusterCIDRConfig from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterCIDRConfig, error)
	ClusterCIDRConfigListerExpansion
}

// clusterCIDRConfigLister implements the ClusterCIDRConfigLister interface.
type clusterCIDRConfigLister struct {
	indexer cache.Indexer
}

// NewClusterCIDRConfigLister returns a new ClusterCIDRConfigLister.
func NewClusterCIDRConfigLister(indexer cache.Indexer) ClusterCIDRConfigLister {
	return &clusterCIDRConfigLister{indexer: indexer}
}

// List lists all ClusterCIDRConfigs in the indexer.
func (s *clusterCIDRConfigLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterCIDRConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterCIDRConfig))
	})
	return ret, err
}

// Get retrieves the ClusterCIDRConfig from the index for a given name.
func (s *clusterCIDRConfigLister) Get(name string) (*v1alpha1.ClusterCIDRConfig, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clustercidrconfig"), name)
	}
	return obj.(*v1alpha1.ClusterCIDRConfig), nil
}
